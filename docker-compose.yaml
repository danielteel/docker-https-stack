services:
  nginx-proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./certs:/etc/nginx/certs:rw
      - ./vhost.d:/etc/nginx/vhost.d
      - html_data:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    environment:
      - TRUST_DOWNSTREAM_PROXY=false
    networks:
      - web
    restart: unless-stopped

  acme-companion:
    image: nginxproxy/acme-companion
    container_name: nginx-proxy-acme
    depends_on:
      - nginx-proxy
    volumes:
      - ./certs:/etc/nginx/certs:rw
      - ./vhost.d:/etc/nginx/vhost.d
      - html_data:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - DEFAULT_EMAIL=${LETSENCRYPT_EMAIL}
      - NGINX_PROXY_CONTAINER=nginx-proxy
      - HTTPS_METHOD=redirect
    networks:
      - web
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: frontend
    environment:
      - VIRTUAL_HOST=${LETSENCRYPT_HOST}
      - LETSENCRYPT_HOST=${LETSENCRYPT_HOST}
      - LETSENCRYPT_EMAIL=${LETSENCRYPT_EMAIL}
    networks:
      - web
    restart: unless-stopped

  backend:
    build: ./backend
    container_name: backend
    environment:
      - VIRTUAL_PATH=${API_VIRTUAL_PATH}
      - VIRTUAL_PORT=${API_PORT}
      - VIRTUAL_HOST=${LETSENCRYPT_HOST}
      - API_PORT=${API_PORT}
      - DEVICE_PORT=${DEVICE_PORT}
      - SUPER_PASSWORD=${SUPER_PASSWORD}
      - SUPER_USERNAME=${SUPER_USERNAME}
      - DOMAIN=${DOMAIN}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASS=${EMAIL_PASS}
      - EMAIL_PORT=${EMAIL_PORT}
      - DEVICE1_NAME=${DEVICE1_NAME}
      - DEVICE1_KEY=${DEVICE1_KEY}
      - DEVICE2_NAME=${DEVICE2_NAME}
      - DEVICE2_KEY=${DEVICE2_KEY}
    tmpfs:
      - /usr/src/app/tmp:rw,size=50m
    depends_on:
      - postgres
    ports:
      - ${DEVICE_PORT}:${DEVICE_PORT}
    networks:
      - web
      - database
    restart: unless-stopped

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    networks:
      - database
    restart: unless-stopped
      
  desec-ddns:
    build: ./desec-ddns
    container_name: desec-ddns
    environment:
      DESEC_TOKEN: ${DESEC_TOKEN}
      DESEC_DOMAIN: ${DESEC_DOMAIN}
    restart: unless-stopped

networks:
   web:
   database:
     internal: true  

volumes:
  postgres_data:
  html_data: